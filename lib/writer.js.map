{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../src/parser.js",
    "../src/writer.js"
  ],
  "names": [],
  "mappingszGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict'\n\n/* TESTS */\n/*\n// TODO: create function that get the selected element + its childNodes\nlet tokens1 = document.getElementById(\"test1\").childNodes\nlet tree1 = parser( tokens1 )\n\nlet tokens2 = document.getElementById(\"test2\").childNodes\nlet tree2 = parser( tokens2 )\n\nlet tokens3 = document.getElementById(\"test3\").childNodes\nlet tree3 = parser( tokens3 )\n\nconsole.log(JSON.stringify(tree1, function(key, value) {\n  return value\n}))\nconsole.log(JSON.stringify(tree2))\nconsole.log(JSON.stringify(tree3))\n*/\n\n\n\nmodule.exports = exports = parser\n\n/**\n * Parses tokens into a graph with \"writable\" objects\n * @param {Node[]|NodeList|Iterable<Node>} tokens\n * @return {Writer}\n */\nfunction parser(tokens) {\n  return writer( map(textFactory, tokens)\n    .reduce(treeBuilder, []) )\n}\n\nfunction writer(writables) {\n  let current = last(writables)\n  return {\n    get textLength() { // Maybe you could just call textContent.length on the root node you pass to the parser\n      return map(x => x.textLength, writables)\n        .reduce((a,b) => a + b)\n    },\n    remove(n) {\n      if(!current) return\n      if(current.textLength === 0) {\n        current = current.previousSibling\n        this.remove(n)\n        return\n      }\n\n      current.textContent = current.textContent.slice(0, -n)\n    }\n  }\n}\n\nfunction map(f, iterable) {\n  return Array.prototype.map.call(iterable, x => f(x))\n}\n\n/**\n * Creates \"writable\" text objects\n * @param {Node} node\n * @return {Object}\n */\nfunction textFactory(node) {\n  return {\n    node,\n    nodeName: node.nodeName,\n    nodeType: node.nodeType,\n    childNodes: node.childNodes,\n    get textContent() {\n      return node.textContent\n    },\n    set textContent(value) {\n      node.textContent = value\n    },\n    get textLength() {\n      return node.textContent.length\n    },\n    // nextSibling: null,\n    previousSibling: null,\n    // writeText,\n    // removeText,\n  }\n}\n\nfunction treeBuilder(tree, text) {\n  switch(text.nodeType) {\n    case Node.ELEMENT_NODE:\n      tree.push(text)\n      if(text.childNodes.length)\n        text.childNodes = map(textFactory, text.childNodes)\n                            .reduce(treeBuilder, [])\n      break\n    case Node.TEXT_NODE: // TODO: don't ignore empty nodes anyway, they're important for <pre> etc. and I can simplify or remove treeBuilder\n      text.textContent.trim() === '' || tree.push(text)\n      break\n  }\n  text.previousSibling = tree[tree.length - 2]\n  return tree\n}\n\nfunction last(indexed) {\n  return indexed[indexed.length - 1]\n}\n",
    "'use strict'\n\nconst parser = require('./parser')\n\nlet entry = document.querySelector('.entry')\n\ndocument.addEventListener(\"click\", bind(writeStatus, entry, 'Document is clicked'), false);\n//setTimeout(bind(writeStatus, entry, 'Hello World'), 1000)\nsetTimeout(bind(eraseText, entry.querySelector('.entry__status'), 60), 500)\n\nfunction bind(f, /*args*/) {\n  var args = [].slice.call(arguments)\n  return f.bind.apply(f, args)\n}\n\nfunction writeStatus(entry, msg) {\n  let entryStatus = entry.querySelectorAll(\".entry__status\")\n  entryStatus.forEach(function(status) {\n    eraseText(status, 40, function(){\n      status.classList.add('entry__status_active')\n      writeText(status, msg, 60)\n    })\n  })\n}\n\nfunction eraseText(el, speed, cb) {\n  let text = parser(el.childNodes)\n  // let textLength = text.textLength\n  let n = el.textContent.length\n  let timer = setInterval(() => {\n    text.remove(1)\n    //el.textContent = el.textContent.slice(0, -1)\n    n--\n    if(n === 0) {\n      clearInterval(timer)\n      // el.dataset.writing = 0\n      cb && cb()\n    }\n  }, speed)\n}\n\nfunction writeText(el, string, speed, cb) {\n  let chars = [].slice.call(string)\n  let n = 0, max = chars.length\n  let timer = setInterval(() => {\n    el.textContent += chars[n]\n    n++\n    if(n === max) {\n      clearInterval(timer)\n      el.dataset.writing = 0\n      cb && cb()\n    }\n  }, speed)\n}\n"
  ]
}