{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../src/parser.js","../src/util.js","../src/writer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","parser","tokens","map","textFactory","reduce","treeBuilder","node","nodeName","nodeType","childNodes","textContent","value","textLength","previousSibling","tree","text","Node","ELEMENT_NODE","push","TEXT_NODE","trim","tree1","document","getElementById","console","log","JSON","stringify","iterable","Array","prototype","x","eraseText","el","speed","cb","writer","timer","setInterval","remove","clearInterval","writeText","html","cloneNode","innerHTML","max","dataset","writing","writables","current","last","b","[object Object]","this","slice","indexed","bind","args","arguments","apply","writeStatus","entry","msg","querySelectorAll","forEach","status","classList","add","querySelector","addEventListener","setTimeout"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nconst map = require('./util').map\n\n/* TESTS */\n\n// TODO: create function that get the selected element + its childNodes\nlet tokens1 = document.getElementById(\"test1\").childNodes\nlet tree1 = parser( tokens1 )\n\n// let tokens2 = document.getElementById(\"test2\").childNodes\n// let tree2 = parser( tokens2 )\n\n// let tokens3 = document.getElementById(\"test3\").childNodes\n// let tree3 = parser( tokens3 )\n\nconsole.log(JSON.stringify(tree1))\n// console.log(JSON.stringify(tree2))\n// console.log(JSON.stringify(tree3))\n\n\n\n\nmodule.exports = exports = parser\n\n/**\n * Parses tokens into a graph with \"writable\" objects\n * @param {Node[]|NodeList|Iterable<Node>} tokens\n * @return {Writer}\n */\nfunction parser(tokens) {\n  return map(textFactory, tokens)\n    .reduce(treeBuilder, [])\n}\n\n/**\n * Creates \"writable\" text objects\n * @param {Node} node\n * @return {Object}\n */\nfunction textFactory(node) {\n  return {\n    // node,\n    nodeName: node.nodeName,\n    nodeType: node.nodeType,\n    childNodes: node.childNodes,\n    get textContent() {\n      return node.textContent\n    },\n    set textContent(value) {\n      node.textContent = value\n    },\n    get textLength() {\n      return node.textContent.length\n    },\n    // nextSibling: null,\n    previousSibling: null\n    // writeText,\n    // removeText,\n  }\n}\n\nfunction treeBuilder(tree, text) {\n  switch(text.nodeType) {\n    case Node.ELEMENT_NODE:\n      tree.push(text)\n      if(text.childNodes.length)\n        text.childNodes = parser(text.childNodes)\n      break\n    case Node.TEXT_NODE:\n      text.textContent.trim() === '' || tree.push(text)\n      break\n  }\n  text.previousSibling = tree[tree.length - 2]\n  return tree\n}\n","'use strict'\n\nmodule.exports = {\n  map\n}\n\nfunction map(f, iterable) {\n  return Array.prototype.map.call(iterable, x => f(x))\n}\n","'use strict'\n\nconst parser = require('./parser')\nconst map = require('./util').map\n\nmain()\n\nfunction main() {\n  let entry = document.querySelector('.entry')\n\n  document.addEventListener(\"click\", bind(writeStatus, entry, 'Document is clicked'), false)\n  setTimeout(bind(writeStatus, entry, 'Hello <span>World</span>'), 1000)\n  // setTimeout(bind(eraseText, entry.querySelector('.entry__status'), 60), 500)\n\n  function bind(f /*,args*/) {\n    var args = [].slice.call(arguments)\n    return f.bind.apply(f, args)\n  }\n\n  function writeStatus(entry, msg) {\n    let entryStatus = entry.querySelectorAll(\".entry__status\")\n    entryStatus.forEach(function(status) {\n      eraseText(status, 40, function(){\n        status.classList.add('entry__status_active')\n        writeText(status, msg, 60)\n      })\n    })\n  }\n}\n\nfunction eraseText(el, speed, cb) {\n  let text = writer( parser(el.childNodes) )\n  // let textLength = text.textLength\n  let n = el.textContent.length\n  let timer = setInterval(() => {\n    text.remove(1)\n    //el.textContent = el.textContent.slice(0, -1)\n    n--\n    if(n === 0) {\n      clearInterval(timer)\n      // el.dataset.writing = 0\n      cb && cb()\n    }\n  }, speed)\n}\n\nfunction writeText(el, html, speed, cb) {\n  el = el.cloneNode(false)\n  el.innerHTML = html\n  let text = writer( parser(el.childNodes) )\n  let n = 0, max = el.textContent.length // text.textLength\n  let timer = setInterval(() => {\n    el.textContent += text[n]\n    n++\n    if(n === max) {\n      clearInterval(timer)\n      el.dataset.writing = 0\n      cb && cb()\n    }\n  }, speed)\n}\n\nfunction writer(writables) {\n  let current = last(writables)\n  return {\n    get textLength() { // Maybe you could just call textContent.length on the root node you pass to the parser\n      return map(x => x.textLength, writables)\n        .reduce((a,b) => a + b)\n    },\n    remove(n) {\n      if(!current) return\n      if(current.textLength === 0) {\n        current = current.previousSibling\n        this.remove(n)\n        return\n      }\n\n      current.textContent = current.textContent.slice(0, -n)\n    }\n  }\n}\n\nfunction last(indexed) {\n  return indexed[indexed.length - 1]\n}\n"]}